// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";

contract Token is ERC20, ERC20Burnable, Ownable {
   
    event TokensSent(address indexed sender, address indexed receiver, uint256 amount);
    event TokensLocked(address indexed account, uint256 lockDuration);

    mapping(address => uint256) public lockTimestamp;

    constructor(
        string memory _title,
        string memory _code,
        uint256 initialSupply
    ) ERC20(_title, _code) Ownable(msg.sender) {
        _mint(msg.sender, initialSupply);
    }

    function mintTokens(address claimant, uint256 amount) external onlyOwner {
        _mint(claimant, amount);
    }

    function burnTokens(uint256 amount) external {
        _burn(msg.sender, amount);
    }
    

    function increaseTotalSupply(uint256 amount) external onlyOwner {
        _mint(owner(), amount);
    }
    
    function transfer(address claimant, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), claimant, amount);
        emit TokensSent(_msgSender(), claimant, amount);
        return true;
    }

    function emergencyTransfer(address receiver, uint256 amount) external onlyOwner {
        _transfer(owner(), receiver, amount);
        emit TokensSent(owner(), receiver, amount);
    }

    
    
}
